# Generated from /home/kate/PycharmProjects/fl-2022-itmo-spr/src/grammar/MyGrammar.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,129,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,5,12,67,8,12,10,12,12,
        12,70,9,12,1,13,1,13,5,13,74,8,13,10,13,12,13,77,9,13,1,14,1,14,
        5,14,81,8,14,10,14,12,14,84,9,14,1,14,1,14,1,15,3,15,89,8,15,1,15,
        4,15,92,8,15,11,15,12,15,93,1,15,5,15,97,8,15,10,15,12,15,100,9,
        15,1,15,1,15,1,16,3,16,105,8,16,1,16,4,16,108,8,16,11,16,12,16,109,
        1,17,4,17,113,8,17,11,17,12,17,114,1,17,1,17,1,18,1,18,1,18,1,18,
        5,18,123,8,18,10,18,12,18,126,9,18,1,18,1,18,0,0,19,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,1,0,10,2,0,42,43,63,63,1,0,97,122,3,0,48,
        57,95,95,97,122,1,0,65,90,3,0,48,57,65,90,95,95,2,0,10,10,34,34,
        3,0,9,10,12,13,32,32,2,0,43,43,45,45,2,0,9,9,32,32,1,0,10,10,138,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,41,
        1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,0,9,47,1,0,0,0,11,49,1,0,0,0,13,
        51,1,0,0,0,15,53,1,0,0,0,17,55,1,0,0,0,19,57,1,0,0,0,21,60,1,0,0,
        0,23,62,1,0,0,0,25,64,1,0,0,0,27,71,1,0,0,0,29,78,1,0,0,0,31,91,
        1,0,0,0,33,104,1,0,0,0,35,112,1,0,0,0,37,118,1,0,0,0,39,40,5,58,
        0,0,40,2,1,0,0,0,41,42,5,123,0,0,42,4,1,0,0,0,43,44,5,125,0,0,44,
        6,1,0,0,0,45,46,5,40,0,0,46,8,1,0,0,0,47,48,5,41,0,0,48,10,1,0,0,
        0,49,50,5,91,0,0,50,12,1,0,0,0,51,52,5,93,0,0,52,14,1,0,0,0,53,54,
        5,44,0,0,54,16,1,0,0,0,55,56,5,46,0,0,56,18,1,0,0,0,57,58,5,46,0,
        0,58,59,5,46,0,0,59,20,1,0,0,0,60,61,5,124,0,0,61,22,1,0,0,0,62,
        63,7,0,0,0,63,24,1,0,0,0,64,68,7,1,0,0,65,67,7,2,0,0,66,65,1,0,0,
        0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,26,1,0,0,0,70,68,
        1,0,0,0,71,75,7,3,0,0,72,74,7,4,0,0,73,72,1,0,0,0,74,77,1,0,0,0,
        75,73,1,0,0,0,75,76,1,0,0,0,76,28,1,0,0,0,77,75,1,0,0,0,78,82,5,
        34,0,0,79,81,8,5,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,
        83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,5,34,0,0,86,30,1,0,
        0,0,87,89,5,13,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,
        92,5,10,0,0,91,88,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,
        0,0,94,98,1,0,0,0,95,97,7,6,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,
        96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,6,
        15,0,0,102,32,1,0,0,0,103,105,7,7,0,0,104,103,1,0,0,0,104,105,1,
        0,0,0,105,107,1,0,0,0,106,108,2,48,57,0,107,106,1,0,0,0,108,109,
        1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,34,1,0,0,0,111,113,7,
        8,0,0,112,111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,
        0,0,0,115,116,1,0,0,0,116,117,6,17,0,0,117,36,1,0,0,0,118,119,5,
        47,0,0,119,120,5,47,0,0,120,124,1,0,0,0,121,123,8,9,0,0,122,121,
        1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,127,
        1,0,0,0,126,124,1,0,0,0,127,128,6,18,0,0,128,38,1,0,0,0,11,0,68,
        75,82,88,93,98,104,109,114,124,1,0,1,0
    ]

class MyGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COLON = 1
    LEFT_BRACE = 2
    RIGHT_BRACE = 3
    LEFT_PAREN = 4
    RIGHT_PAREN = 5
    LEFT_BRACKET = 6
    RIGHT_BRACKET = 7
    COMMA = 8
    DOT = 9
    DOUBLE_DOT = 10
    VBAR = 11
    OPERATOR = 12
    RULE = 13
    TOKEN = 14
    STRING = 15
    NEW_LINE = 16
    NUMBER = 17
    WS = 18
    COMMENT = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'{'", "'}'", "'('", "')'", "'['", "']'", "','", "'.'", 
            "'..'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "COLON", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", 
            "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "DOT", "DOUBLE_DOT", 
            "VBAR", "OPERATOR", "RULE", "TOKEN", "STRING", "NEW_LINE", "NUMBER", 
            "WS", "COMMENT" ]

    ruleNames = [ "COLON", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", 
                  "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "DOT", "DOUBLE_DOT", 
                  "VBAR", "OPERATOR", "RULE", "TOKEN", "STRING", "NEW_LINE", 
                  "NUMBER", "WS", "COMMENT" ]

    grammarFileName = "MyGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


