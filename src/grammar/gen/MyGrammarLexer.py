# Generated from /home/kate/PycharmProjects/fl-2022-itmo-spr/src/grammar/MyGrammar.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,5,
        12,71,8,12,10,12,12,12,74,9,12,1,13,1,13,5,13,78,8,13,10,13,12,13,
        81,9,13,1,14,1,14,3,14,85,8,14,1,15,1,15,5,15,89,8,15,10,15,12,15,
        92,9,15,1,15,1,15,1,16,1,16,5,16,98,8,16,10,16,12,16,101,9,16,1,
        16,1,16,1,17,3,17,106,8,17,1,17,4,17,109,8,17,11,17,12,17,110,1,
        17,5,17,114,8,17,10,17,12,17,117,9,17,1,17,1,17,1,18,3,18,122,8,
        18,1,18,4,18,125,8,18,11,18,12,18,126,1,19,4,19,130,8,19,11,19,12,
        19,131,1,19,1,19,1,20,1,20,1,20,1,20,5,20,140,8,20,10,20,12,20,143,
        9,20,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,1,0,11,2,0,42,43,63,63,1,0,97,122,3,0,48,57,95,95,97,122,1,0,
        65,90,3,0,48,57,65,90,95,95,1,0,34,34,1,0,39,39,3,0,9,10,12,13,32,
        32,2,0,43,43,45,45,2,0,9,9,32,32,1,0,10,10,157,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,
        0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,49,1,0,0,0,9,51,1,0,0,0,11,53,1,
        0,0,0,13,55,1,0,0,0,15,57,1,0,0,0,17,59,1,0,0,0,19,61,1,0,0,0,21,
        64,1,0,0,0,23,66,1,0,0,0,25,68,1,0,0,0,27,75,1,0,0,0,29,84,1,0,0,
        0,31,86,1,0,0,0,33,95,1,0,0,0,35,108,1,0,0,0,37,121,1,0,0,0,39,129,
        1,0,0,0,41,135,1,0,0,0,43,44,5,58,0,0,44,2,1,0,0,0,45,46,5,123,0,
        0,46,4,1,0,0,0,47,48,5,125,0,0,48,6,1,0,0,0,49,50,5,40,0,0,50,8,
        1,0,0,0,51,52,5,41,0,0,52,10,1,0,0,0,53,54,5,91,0,0,54,12,1,0,0,
        0,55,56,5,93,0,0,56,14,1,0,0,0,57,58,5,44,0,0,58,16,1,0,0,0,59,60,
        5,46,0,0,60,18,1,0,0,0,61,62,5,46,0,0,62,63,5,46,0,0,63,20,1,0,0,
        0,64,65,5,124,0,0,65,22,1,0,0,0,66,67,7,0,0,0,67,24,1,0,0,0,68,72,
        7,1,0,0,69,71,7,2,0,0,70,69,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,
        72,73,1,0,0,0,73,26,1,0,0,0,74,72,1,0,0,0,75,79,7,3,0,0,76,78,7,
        4,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,
        28,1,0,0,0,81,79,1,0,0,0,82,85,3,31,15,0,83,85,3,33,16,0,84,82,1,
        0,0,0,84,83,1,0,0,0,85,30,1,0,0,0,86,90,5,34,0,0,87,89,8,5,0,0,88,
        87,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,
        0,92,90,1,0,0,0,93,94,5,34,0,0,94,32,1,0,0,0,95,99,5,39,0,0,96,98,
        8,6,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,
        0,100,102,1,0,0,0,101,99,1,0,0,0,102,103,5,39,0,0,103,34,1,0,0,0,
        104,106,5,13,0,0,105,104,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,
        107,109,5,10,0,0,108,105,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,
        110,111,1,0,0,0,111,115,1,0,0,0,112,114,7,7,0,0,113,112,1,0,0,0,
        114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,118,1,0,0,0,
        117,115,1,0,0,0,118,119,6,17,0,0,119,36,1,0,0,0,120,122,7,8,0,0,
        121,120,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,125,2,48,57,
        0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,
        0,127,38,1,0,0,0,128,130,7,9,0,0,129,128,1,0,0,0,130,131,1,0,0,0,
        131,129,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,134,6,19,0,0,
        134,40,1,0,0,0,135,136,5,47,0,0,136,137,5,47,0,0,137,141,1,0,0,0,
        138,140,8,10,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,
        141,142,1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,6,20,0,0,
        145,42,1,0,0,0,13,0,72,79,84,90,99,105,110,115,121,126,131,141,1,
        0,1,0
    ]

class MyGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COLON = 1
    LEFT_BRACE = 2
    RIGHT_BRACE = 3
    LEFT_PAREN = 4
    RIGHT_PAREN = 5
    LEFT_BRACKET = 6
    RIGHT_BRACKET = 7
    COMMA = 8
    DOT = 9
    DOUBLE_DOT = 10
    VBAR = 11
    OPERATOR = 12
    RULE = 13
    TOKEN = 14
    STRING = 15
    DOUBLE_QUOTED_STRING = 16
    SINGLE_QUOTED_STRING = 17
    NEW_LINE = 18
    NUMBER = 19
    WS = 20
    COMMENT = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'{'", "'}'", "'('", "')'", "'['", "']'", "','", "'.'", 
            "'..'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "COLON", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", 
            "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "DOT", "DOUBLE_DOT", 
            "VBAR", "OPERATOR", "RULE", "TOKEN", "STRING", "DOUBLE_QUOTED_STRING", 
            "SINGLE_QUOTED_STRING", "NEW_LINE", "NUMBER", "WS", "COMMENT" ]

    ruleNames = [ "COLON", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", 
                  "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "DOT", "DOUBLE_DOT", 
                  "VBAR", "OPERATOR", "RULE", "TOKEN", "STRING", "DOUBLE_QUOTED_STRING", 
                  "SINGLE_QUOTED_STRING", "NEW_LINE", "NUMBER", "WS", "COMMENT" ]

    grammarFileName = "MyGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


